<?xml version="1.0" encoding="UTF-8"?>
<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="messagecollection.xsd">

    <Plugin>
        <ShortDescription>Palantir Antipatterns Plugin</ShortDescription>
        <Details>Detects some common antipatterns.</Details>
    </Plugin>

    <Detector class="com.palantir.antipatterns.ExtendsConcreteTypeDetector">
        <Details>
            This detector finds types that extend concrete (i.e. non-abstract) types.
        </Details>
    </Detector>

    <Detector class="com.palantir.antipatterns.FinalSignatureDetector">
        <Details>
            This detector finds public method signatures using types declared as final (which breaks
            Mockito).
        </Details>
    </Detector>

    <BugPattern type="PT_EXTENDS_CONCRETE_TYPE">
        <ShortDescription>Extends concrete type</ShortDescription>
        <LongDescription>{0} extends concrete type {1}</LongDescription>
        <Details>
<![CDATA[
  <p> Subclassing concrete types is fragile. Prefer composition to inheritance: extract a common
  interface, or use a proxy to implement the delegation pattern. In the rare case of genuine
  shared behaviour (e.g. AbstractList), carefully extract a common abstract superclass. See also
  <a href="https://codingantihero.wordpress.com/2016/02/08/antipattern-final-classes/"
  >Antipattern: Final classes</a> </p>
]]>
        </Details>
    </BugPattern>

    <BugCode abbrev="PTXCT">Extends concrete type</BugCode>

    <BugPattern type="PT_FINAL_TYPE_PARAM">
        <ShortDescription>Parameter of final type</ShortDescription>
        <LongDescription>Parameter {0} of {2} is of final type {3}</LongDescription>
        <Details>
<![CDATA[
  <p> Using final types in method signatures breaks proxying utilities like
  <a href="http://mockito.org/">Mockito</a>. Extract an interface, or remove the final keyword and
  hide the constructor instead. See also
  <a href="https://codingantihero.wordpress.com/2016/02/08/antipattern-final-classes/"
  >Antipattern: Final classes</a> </p>
]]>
        </Details>
    </BugPattern>

    <BugCode abbrev="PTFP">Parameter of final type</BugCode>

    <BugPattern type="PT_FINAL_TYPE_RETURN">
        <ShortDescription>Returns final type</ShortDescription>
        <LongDescription>{1} returns final type {2}</LongDescription>
        <Details>
<![CDATA[
  <p> Using final types in method signatures breaks proxying utilities like
  <a href="http://mockito.org/">Mockito</a>. Extract an interface, or remove the final keyword and
  hide the constructor instead. See also
  <a href="https://codingantihero.wordpress.com/2016/02/08/antipattern-final-classes/"
  >Antipattern: Final classes</a> </p>
]]>
        </Details>
    </BugPattern>

    <BugCode abbrev="PTFR">Returns final type</BugCode>

    <BugPattern type="PT_FINAL_TYPE_CONSTRUCTOR">
        <ShortDescription>Public constructor on final type</ShortDescription>
        <LongDescription>Final type has public constructor {0}</LongDescription>
        <Details>
<![CDATA[
  <p> Final types break proxying utilities like <a href="http://mockito.org/">Mockito</a>.
  Remove the final keyword. To prevent subclassing, hide the constructor behind a static factory
  method&mdash;or just trust your users not to do anything stupid. See also
  <a href="https://codingantihero.wordpress.com/2016/02/08/antipattern-final-classes/"
  >Antipattern: Final classes</a> </p>
]]>
        </Details>
    </BugPattern>

    <BugCode abbrev="PTFC">Public constructor on final type</BugCode>

</MessageCollection>
